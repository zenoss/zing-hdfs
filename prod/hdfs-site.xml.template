<configuration>

  <property>
    <name>dfs.namenode.rpc-bind-host</name>
    <value>0.0.0.0</value>
    <description>
      The actual address the RPC server will bind to. If this optional address is
      set, it overrides only the hostname portion of dfs.namenode.rpc-address.
      It can also be specified per name node or name service for HA/Federation.
      This is useful for making the name node listen on all interfaces by
      setting it to 0.0.0.0.
    </description>
  </property>

  <property>
    <name>dfs.namenode.servicerpc-bind-host</name>
    <value>0.0.0.0</value>
    <description>
      The actual address the service RPC server will bind to. If this optional address is
      set, it overrides only the hostname portion of dfs.namenode.servicerpc-address.
      It can also be specified per name node or name service for HA/Federation.
      This is useful for making the name node listen on all interfaces by
      setting it to 0.0.0.0.
    </description>
  </property>

  <property>
    <name>dfs.namenode.http-bind-host</name>
    <value>0.0.0.0</value>
    <description>
      The actual adress the HTTP server will bind to. If this optional address
      is set, it overrides only the hostname portion of dfs.namenode.http-address.
      It can also be specified per name node or name service for HA/Federation.
      This is useful for making the name node HTTP server listen on all
      interfaces by setting it to 0.0.0.0.
    </description>
  </property>

  <property>
    <name>dfs.namenode.https-bind-host</name>
    <value>0.0.0.0</value>
    <description>
      The actual adress the HTTPS server will bind to. If this optional address
      is set, it overrides only the hostname portion of dfs.namenode.https-address.
      It can also be specified per name node or name service for HA/Federation.
      This is useful for making the name node HTTPS server listen on all
      interfaces by setting it to 0.0.0.0.
    </description>
  </property>

  <property>
    <name>dfs.nameservices</name>
    <value>${CLUSTER_NAME}</value>
  </property>
  <property>
    <name>dfs.ha.namenodes.${CLUSTER_NAME}</name>
    <value>nn1,nn2</value>
  </property>

  <property>
    <name>dfs.namenode.rpc-address.${CLUSTER_NAME}.nn1</name>
    <value>${NNODE1_IP}:8020</value>
  </property>
  <property>
    <name>dfs.namenode.rpc-address.${CLUSTER_NAME}.nn2</name>
    <value>${NNODE2_IP}:8020</value>
  </property>
  <property>
    <name>dfs.namenode.servicerpc-address.${CLUSTER_NAME}.nn1</name>
    <value>${NNODE1_IP}:8022</value>
  </property>
  <property>
    <name>dfs.namenode.servicerpc-address.${CLUSTER_NAME}.nn2</name>
    <value>${NNODE2_IP}:8022</value>
  </property>
  <property>
    <name>dfs.namenode.http-address.${CLUSTER_NAME}.nn1</name>
    <value>${NNODE1_IP}:50070</value>
  </property>
  <property>
    <name>dfs.namenode.http-address.${CLUSTER_NAME}.nn2</name>
    <value>${NNODE2_IP}:50070</value>
  </property>
  <property>
    <name>dfs.namenode.name.dir</name>
    <value>file:///data/hdfs/nn</value>
    <description>Path on the local filesystem where the NameNode stores the namespace and transaction logs persistently.</description>
  </property>

  <!-- Journal Nodes -->
  <property>
    <name>dfs.namenode.shared.edits.dir</name>
    <value>qjournal://${JNODES}/${CLUSTER_NAME}</value>
  </property>
  <property>
    <name>dfs.journalnode.edits.dir</name>
    <value>/data/hdfs/journal</value>
  </property>
  <!-- Journal Nodes -->

  <!-- Data Nodes -->
  <property>
    <name>dfs.datanode.data.dir</name>
    <value>file:///data/hdfs/dn</value>
    <description>Comma separated list of paths on the local filesystem of a DataNode where it should store its blocks.</description>
  </property>
  <!-- Data Nodes -->

  <!-- Zookeeper failover -->
  <property>
    <name>dfs.ha.automatic-failover.enabled</name>
    <value>true</value>
  </property>
  <!-- Zookeeper failover -->

  <!-- Manual Failover -->
  <property>
    <name>dfs.client.failover.proxy.provider.${CLUSTER_NAME}</name>
    <value>org.apache.hadoop.hdfs.server.namenode.ha.ConfiguredFailoverProxyProvider</value>
  </property>
  <property>
    <name>dfs.ha.fencing.methods</name>
    <value>shell(/bin/true)</value>
  </property>
  <!-- Manual Failover -->

  <property>
    <name>dfs.namenode.replication.min</name>
    <value>3</value>
    <final>true</final>
  </property>
  <property>
    <name>dfs.replication.max</name>
    <value>10</value>
    <final>true</final>
  </property>

  <property>
    <name>mapreduce.client.submit.file.replication</name>
    <value>3</value>
    <final>true</final>
  </property>

  <property>
    <name>dfs.webhdfs.enabled</name>
    <value>true</value>
  </property>

<!-- Block location tracking -->
  <property>
    <name>dfs.datanode.hdfs-blocks-metadata.enabled</name>
    <value>true</value>
  </property>
<!-- Block location tracking -->

</configuration>
